syntax = "proto3";

package proto.service;

import "google/api/annotations.proto";

option java_multiple_files = true;
option java_package = "keyring.server.main.proto.service";

message RegisterRequest {
    string username = 1;
    string salt = 2;
    string digest = 3;
    string mail = 4;
    string captcha_token = 5;
}

message RegisterResponse {
    enum Error {
        NONE = 0;
        NAME_TAKEN = 1;
    }

    Error error = 1;
    string session_key = 2;
    int64 mail_token_id = 3;
}

message GetSaltRequest {
    string username = 1;
}

message GetSaltResponse {
    enum Error {
        NONE = 0;
        NOT_FOUND = 1;
    }

    Error error = 1;
    string salt = 2;
}

message LogInRequest {
    string username = 1;
    string digest = 2;
}

enum FeatureType {
    UNKNOWN = 0;
    OTP = 1;
    FUZZY_SEARCH = 2;
}

message FeaturePrompt {
    FeatureType feature_type = 1;
}

message MailVerification {
    bool required = 1;
    int64 token_id = 2;
}

message UserData {
    reserved 3;

    string session_key = 1;
    repeated FeaturePrompt feature_prompts = 5;
    repeated KeyProto user_keys = 2;
    MailVerification mail_verification = 6;
    string mail = 4;
}

message OtpContext {
    string authn_key = 1;
    int32 attempts_left = 2;
}

message LogInResponse {
    reserved 2;

    enum Error {
        NONE = 0;
        INVALID_CREDENTIALS = 1;
    }

    Error error = 1;
    UserData user_data = 3;
    OtpContext otp_context = 4;
}

message ProvideOtpRequest {
    string authn_key = 1;
    string otp = 2;
    bool yield_trusted_token = 3;
}

message ProvideOtpResponse {
    enum Error {
        NONE = 0;
        INVALID_CODE = 1;
        ATTEMPTS_EXHAUSTED = 2;
    }

    Error error = 1;
    int32 attempts_left = 2;
    string trusted_token = 3;
    UserData user_data = 4;
}

service Authentication {
    rpc Register (RegisterRequest) returns (RegisterResponse) {
        option (google.api.http) = {
            post: "/authentication/register"
            body: "*"
        };
    }
    rpc GetSalt (GetSaltRequest) returns (GetSaltResponse) {
        option (google.api.http) = { get: "/authentication/get-salt/{username}" };
    }
    rpc LogIn (LogInRequest) returns (LogInResponse) {
        option (google.api.http) = {
            post: "/authentication/log-in"
            body: "*"
        };
    }
    rpc ProvideOtp (ProvideOtpRequest) returns (ProvideOtpResponse) {
        option (google.api.http) = {
            post: "/authentication/provide-otp"
            body: "*"
        };
    }
}

message AcquireMailTokenRequest {
    string digest = 1;
    string mail = 2;
}

message AcquireMailTokenResponse {
    enum Error {
        NONE = 0;
        INVALID_DIGEST = 1;
    }

    Error error = 1;
    int64 token_id = 2;
}

message ReleaseMailTokenRequest {
    string code = 1;
    int64 token_id = 2;
}

message ReleaseMailTokenResponse {
    enum Error {
        NONE = 0;
        INVALID_CODE = 1;
        INVALID_TOKEN_ID = 2;
        TOO_MANY_REQUESTS = 3;
    }

    Error error = 1;
    string mail = 2;
}

message KeepAliveRequest {
}

message KeepAliveResponse {
}

message Password {
    string value = 1;
    repeated string tags = 2;
}

message KeyAttrs {
    bool is_shadow = 1;
    int64 parent = 2;
}

message KeyProto {
    int64 identifier = 1;
    Password password = 2;
    KeyAttrs attrs = 3;
    int64 creation_time_in_millis = 4;
}

message KeyPatch {
    int64 identifier = 1;
    Password password = 2;
}

message ImportKeysRequest {
  repeated Password passwords = 1;
}

message ImportKeysResponse {
  message KeyMetadata {
    int64 identifier = 1;
    int64 creation_time_in_millis = 2;
  }

  repeated KeyMetadata metadata = 1;
}

message CreateKeyRequest {
    Password password = 1;
    KeyAttrs attrs = 2;
}

message CreateKeyResponse {
    int64 identifier = 1;
    int64 creation_time_in_millis = 2;
}

message ReadKeysRequest {
}

message ReadKeysResponse {
    repeated KeyProto keys = 1;
}

message UpdateKeyRequest {
    KeyPatch key = 1;
}

message UpdateKeyResponse {
}

message DeleteKeyRequest {
    int64 identifier = 1;
}

message DeleteKeyResponse {
}

message ElectShadowRequest {
    int64 identifier = 1;
}

message ElectShadowResponse {
    int64 parent = 1;
    repeated int64 deleted_shadows = 2;
}

message ChangeMasterKeyRequest {
    message Renewal {
        string salt = 1;
        string digest = 2;
        repeated KeyPatch keys = 3;
    }

    string current_digest = 1;
    Renewal renewal = 2;
}

message ChangeMasterKeyResponse {
    enum Error {
        NONE = 0;
        INVALID_CURRENT_DIGEST = 1;
    }

    Error error = 1;
    string session_key = 2;
}

message ChangeUsernameRequest {
    string digest = 1;
    string username = 2;
}

message ChangeUsernameResponse {
    enum Error {
        NONE = 0;
        INVALID_DIGEST = 1;
        NAME_TAKEN = 2;
    }

    Error error = 1;
}

message DeleteAccountRequest {
    string digest = 1;
}

message DeleteAccountResponse {
    enum Error {
        NONE = 0;
        INVALID_DIGEST = 1;
    }

    Error error = 1;
}

message GetRecentSessionsRequest {
}

message Geolocation {
    string country = 1;
    string city = 2;
}

message GetRecentSessionsResponse {
    message Session {
        enum Status {
            UNKNOWN_STATUS = 0;
            AWAITING_2FA = 1;
            ACTIVATED = 2;
            DISABLED = 3;
        }

        int64 creation_time_in_millis = 1;
        string ip_address = 2;
        string user_agent = 3;
        Geolocation geolocation = 4;
        Status status = 5;
    }

    repeated Session sessions = 1;
}

message GenerateOtpParamsRequest {}

message GenerateOtpParamsResponse {
    string otp_params_id = 4;
    string shared_secret = 1;
    repeated string scratch_codes = 2;
    string key_uri = 3;
}

message AcceptOtpParamsRequest {
    string otp_params_id = 1;
    string otp = 2;
    bool yield_trusted_token = 3;
}

message AcceptOtpParamsResponse {
    enum Error {
        NONE = 0;
        INVALID_CODE = 1;
    }

    Error error = 1;
    string trusted_token = 2;
}

message ResetOtpRequest {
    string otp = 1;
}

message ResetOtpResponse {
    enum Error {
        NONE = 0;
        INVALID_CODE = 1;
    }

    Error error = 1;
}

message AckFeaturePromptRequest {
    FeatureType feature_type = 1;
}

message AckFeaturePromptResponse {
}

service Administration {
    rpc AcquireMailToken (AcquireMailTokenRequest) returns (AcquireMailTokenResponse) {
        option (google.api.http) = {
            post: "/administration/acquire-mail-token"
            body: "*"
        };
    }
    rpc ReleaseMailToken (ReleaseMailTokenRequest) returns (ReleaseMailTokenResponse) {
        option (google.api.http) = {
            post: "/administration/release-mail-token"
            body: "*"
        };
    }
    rpc KeepAlive (KeepAliveRequest) returns (KeepAliveResponse) {
        option (google.api.http) = {
            post: "/administration/keep-alive"
            body: "*"
        };
    };
    rpc ImportKeys (ImportKeysRequest) returns (ImportKeysResponse) {
        option (google.api.http) = {
            post: "/administration/import-keys"
            body: "*"
        };
    }
    rpc CreateKey (CreateKeyRequest) returns (CreateKeyResponse) {
        option (google.api.http) = {
            post: "/administration/create-key"
            body: "*"
        };
    }
    rpc ReadKeys (ReadKeysRequest) returns (ReadKeysResponse) {
        option (google.api.http) = { get: "/administration/read-keys" };
    }
    rpc UpdateKey (UpdateKeyRequest) returns (UpdateKeyResponse) {
        option (google.api.http) = {
            put: "/administration/update-key"
            body: "*"
        };
    }
    rpc DeleteKey (DeleteKeyRequest) returns (DeleteKeyResponse) {
        option (google.api.http) = {
            post: "/administration/delete-key"
            body: "*"
        };
    }
    rpc ElectShadow (ElectShadowRequest) returns (ElectShadowResponse) {
        option (google.api.http) = {
            post: "/administration/elect-shadow"
            body: "*"
        };
    }
    rpc ChangeMasterKey (ChangeMasterKeyRequest) returns (ChangeMasterKeyResponse) {
        option (google.api.http) = {
            post: "/administration/change-master-key"
            body: "*"
        };
    }
    rpc ChangeUsername (ChangeUsernameRequest) returns (ChangeUsernameResponse) {
        option (google.api.http) = {
            put: "/administration/change-username"
            body: "*"
        };
    }
    rpc DeleteAccount (DeleteAccountRequest) returns (DeleteAccountResponse) {
        option (google.api.http) = {
            post: "/administration/delete-account"
            body: "*"
        };
    }
    rpc GetRecentSessions (GetRecentSessionsRequest) returns (GetRecentSessionsResponse) {
        option (google.api.http) = { get: "/administration/get-recent-sessions" };
    }
    rpc GenerateOtpParams (GenerateOtpParamsRequest) returns (GenerateOtpParamsResponse) {
        option (google.api.http) = {
            post: "/administration/generate-otp-params"
            body: "*"
        };
    }
    rpc AcceptOtpParams (AcceptOtpParamsRequest) returns (AcceptOtpParamsResponse) {
        option (google.api.http) = {
            post: "/administration/accept-otp-params"
            body: "*"
        };
    }
    rpc ResetOtp (ResetOtpRequest) returns (ResetOtpResponse) {
        option (google.api.http) = {
            post: "/administration/reset-otp"
            body: "*"
        };
    }
    rpc AckFeaturePrompt (AckFeaturePromptRequest) returns (AckFeaturePromptResponse) {
        option (google.api.http) = {
            post: "/administration/ack-feature-prompt"
            body: "*"
        };
    }
}

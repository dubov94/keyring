syntax = "proto3";

package keyring;

import "google/api/annotations.proto";

option java_multiple_files = true;
option java_package = "com.floreina.keyring";

message RegisterRequest {
    string username = 1;
    string salt = 2;
    string digest = 3;
    string mail = 4;
}

message RegisterResponse {
    enum Error {
        NONE = 0;
        NAME_TAKEN = 1;
    }

    oneof data {
        Error error = 1;
        string session_key = 2;
    }
}

message GetSaltRequest {
    string username = 1;
}

message GetSaltResponse {
    enum Error {
        NONE = 0;
        NOT_FOUND = 1;
    }

    oneof data {
        Error error = 1;
        string salt = 2;
    }
}

message LogInRequest {
    string username = 1;
    string digest = 2;
}

message LogInResponse {
    enum Error {
        NONE = 0;
        INVALID_CREDENTIALS = 1;
    }

    message Payload {
        reserved 2, 3;

        enum Requirement {
            NONE = 0;
            MAIL = 1;
        }

        message KeySet {
            repeated IdentifiedKey items = 1;
        }

        string session_key = 1;

        repeated Requirement requirements = 5;
        KeySet key_set = 4;
    }

    oneof data {
        Error error = 1;
        Payload payload = 2;
    }
}

service Authentication {
    rpc Register (RegisterRequest) returns (RegisterResponse) {
        option (google.api.http) = { post: "/authentication/register" };
    }
    rpc GetSalt (GetSaltRequest) returns (GetSaltResponse) {
        option (google.api.http) = { get: "/authentication/get-salt/{username}" };
    }
    rpc LogIn (LogInRequest) returns (LogInResponse) {
        option (google.api.http) = { post: "/authentication/log-in" };
    }
}

message AcquireMailTokenRequest {
    string digest = 1;
    string mail = 2;
}

message AcquireMailTokenResponse {
    enum Error {
        NONE = 0;
        INVALID_DIGEST = 1;
    }

    Error error = 1;
}

message ReleaseMailTokenRequest {
    string code = 1;
}

message ReleaseMailTokenResponse {
    enum Error {
        NONE = 0;
        INVALID_CODE = 1;
    }

    oneof data {
        Error error = 1;
    }
}

message KeepAliveRequest {
}

message KeepAliveResponse {
}

message Password {
    string value = 1;
    repeated string tags = 2;
}

message IdentifiedKey {
    int64 identifier = 1;
    Password password = 2;
}

message CreateKeyRequest {
    Password password = 1;
}

message CreateKeyResponse {
    int64 identifier = 1;
}

message ReadKeysRequest {
}

message ReadKeysResponse {
    repeated IdentifiedKey keys = 1;
}

message UpdateKeyRequest {
    IdentifiedKey key = 1;
}

message UpdateKeyResponse {
}

message DeleteKeyRequest {
    int64 identifier = 1;
}

message DeleteKeyResponse {
}

message ChangeMasterKeyRequest {
    message Renewal {
        string salt = 1;
        string digest = 2;
        repeated IdentifiedKey keys = 3;
    }

    string current_digest = 1;
    Renewal renewal = 2;
}

message ChangeMasterKeyResponse {
    enum Error {
        NONE = 0;
        INVALID_CURRENT_DIGEST = 1;
    }

    oneof data {
        Error error = 1;
        string session_key = 2;
    }
}

message ChangeUsernameRequest {
    string digest = 1;
    string username = 2;
}

message ChangeUsernameResponse {
    enum Error {
        NONE = 0;
        INVALID_DIGEST = 1;
        NAME_TAKEN = 2;
    }

    Error error = 1;
}

message DeleteAccountRequest {
    string digest = 1;
}

message DeleteAccountResponse {
    enum Error {
        NONE = 0;
        INVALID_DIGEST = 1;
    }

    Error error = 1;
}

message GetRecentSessionsRequest {
}

message Geolocation {
    string country = 1;
    string city = 2;
}

message GetRecentSessionsResponse {
    message Session {
        int64 creation_time_in_millis = 1;
        string ip_address = 2;
        string user_agent = 3;
        Geolocation geolocation = 4;
    }

    repeated Session sessions = 1;
}

service Administration {
    rpc AcquireMailToken (AcquireMailTokenRequest) returns (AcquireMailTokenResponse) {
        option (google.api.http) = { post: "/administration/acquire-mail-token" };
    }
    rpc ReleaseMailToken (ReleaseMailTokenRequest) returns (ReleaseMailTokenResponse) {
        option (google.api.http) = { post: "/administration/release-mail-token" };
    }
    rpc KeepAlive (KeepAliveRequest) returns (KeepAliveResponse) {
        option (google.api.http) = { post: "/administration/keep-alive" };
    };
    rpc CreateKey (CreateKeyRequest) returns (CreateKeyResponse) {
        option (google.api.http) = { post: "/administration/create-key" };
    }
    rpc ReadKeys (ReadKeysRequest) returns (ReadKeysResponse) {
        option (google.api.http) = { get: "/administration/read-keys" };
    }
    rpc UpdateKey (UpdateKeyRequest) returns (UpdateKeyResponse) {
        option (google.api.http) = { put: "/administration/update-key" };
    }
    rpc DeleteKey (DeleteKeyRequest) returns (DeleteKeyResponse) {
        option (google.api.http) = { post: "/administration/delete-key" };
    }
    rpc ChangeMasterKey (ChangeMasterKeyRequest) returns (ChangeMasterKeyResponse) {
        option (google.api.http) = { post: "/administration/change-master-key" };
    }
    rpc ChangeUsername (ChangeUsernameRequest) returns (ChangeUsernameResponse) {
        option (google.api.http) = { put: "/administration/change-username" };
    }
    rpc DeleteAccount (DeleteAccountRequest) returns (DeleteAccountResponse) {
        option (google.api.http) = { post: "/administration/delete-account" };
    }
    rpc GetRecentSessions (GetRecentSessionsRequest) returns (GetRecentSessionsResponse) {
        option (google.api.http) = { get: "/administration/get-recent-sessions" };
    }
}
